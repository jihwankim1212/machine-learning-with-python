# -------------------------------------------------------------- #
# from IPython.display import display
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import mglearn
# -------------------------------------------------------------- #
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA

# 3.4 차원 축소, 특성 추출, 매니폴드 학습
# mglearn.plots.plot_pca_illustration()
# plt.show()

# 주성분 분석 (PCA)
cancer = load_breast_cancer()
# fig, axes = plt.subplots(15, 2, figsize=(10,20))
# malignant = cancer.data[cancer.target == 0]
# benign    = cancer.data[cancer.target == 1]
# ax = axes.ravel()
# for i in range(30):
#     _, bins = np.histogram(cancer.data[:, i], bins=50)
#     ax[i].hist(malignant[:, i], bins=bins, color=mglearn.cm3(0), alpha=.5)
#     ax[i].hist(benign[:, i],    bins=bins, color=mglearn.cm3(2), alpha=.5)
#     ax[i].set_title(cancer.feature_names[i])
#     ax[i].set_yticks(())
# ax[0].set_xlabel("size")
# ax[1].set_ylabel("att 0")
# ax[0].legend(["bad","good"], loc="best")
# fig.tight_layout()
# plt.show()

scaler = StandardScaler()
scaler.fit(cancer.data)
X_scaled = scaler.transform(cancer.data)

# 데이터의 처음 두 개의 주성분만 유지합니다.
pca = PCA(n_components=2)
# 유방암 데이터로 PCA 모델을 만듭니다.
pca.fit(X_scaled)
# 처음 두 개의 주성분을 사용해 데이터를 변환합니다.
X_pca = pca.transform(X_scaled)
print("  원본 데이터 형태 : {}".format(str(X_scaled.shape)))
print("축소된 데이터 형태 : {}".format(str(X_pca.shape   )))
# 클래스를 색깔로 구분하여 처음 두 개의 주성분을 그래프로 나타냅니다.
plt.figure(figsize=(8,8))
mglearn.discrete_scatter(X_pca[:, 0], X_pca[:, 1], cancer.target)
plt.legend(["bad", "good"], loc="best")
plt.gca().set_aspect("equal")
plt.xlabel("att 0")
plt.ylabel("att 1")
# plt.show()
print("PCA 주성분 형태 : {}".format(pca.components_.shape))
print("PCA 주성분      : {}".format(pca.components_))
plt.matshow(pca.components_, cmap='viridis')
plt.yticks([0, 1], ["1", "2"])
plt.colorbar()
plt.xticks(range(len(cancer.feature_names)),
           cancer.feature_names, rotation=60, ha='left')
plt.xlabel("att")
plt.ylabel("pca")
plt.show()
