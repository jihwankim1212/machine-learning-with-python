# -------------------------------------------------------------- #
# from IPython.display import display
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import mglearn
# -------------------------------------------------------------- #
from sklearn.svm import SVC
from sklearn.datasets import load_breast_cancer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import MinMaxScaler
# 6.1 데이터 전처리와 매개변수 선택
from sklearn.model_selection import GridSearchCV
# 6.2 파이프라인 구축하기 p373
from sklearn.pipeline import Pipeline
# -------------------------------------------------------------- #

# 데이터 적재와 분할
cancer = load_breast_cancer()
X_train, X_test, y_train, y_test = train_test_split(cancer.data, cancer.target, random_state=0)
# 훈련 데이터의 최솟값, 최댓값을 계산합니다.
scaler = MinMaxScaler().fit(X_train)
# 훈련 데이터의 스케일을 조정합니다.
X_train_scaled = scaler.transform(X_train)
svm = SVC()
# 스케일 조정된 훈련 데이터에 SVM을 학습시킵니다.
svm.fit(X_train_scaled, y_train)
# 테스트 데이터의 스케일을 조정하고 점수를 계산합니다.
X_test_scaled = scaler.transform(X_test)
# print("테스트 점수 : {:.2f}".format(svm.score(X_test_scaled, y_test)))

# 6.1 데이터 전처리와 매개변수 선택
# 이 코드는 예를 위한 것입니다. 실제로 사용하지 마세요.
param_grid = {'C': [0.001, 0.01, 0.1, 1, 10, 100],
              'gamma': [0.001, 0.01, 0.1, 1, 10, 100]}
grid = GridSearchCV(SVC(), param_grid=param_grid, cv=5)
grid.fit(X_train_scaled, y_train)
# print("최상의 교차 검증 정확도 : {}".format(grid.best_score_))
# print("테스트 세트 점수 : {}".format(grid.score(X_test_scaled, y_test)))
# print("최적의 매개변수 : ",grid.best_params_)
# mglearn.plots.plot_improper_processing()
# plt.show()

# 6.2 파이프라인 구축하기 p373
pipe = Pipeline([("scaler", MinMaxScaler()), ("svm", SVC())])
pipe.fit(X_train, y_train)
# print("테스트 점수 {}".format(pipe.score(X_test, y_test)))

# 6.3 그리드 서치에 파이프라인 적용하기
param_grid = {'svm__C' : [0.001, 0.01, 0.1, 1, 10, 100],
              'svm__gamma' : [0.001, 0.01, 0.1, 1, 10, 100]}
grid = GridSearchCV(pipe, param_grid=param_grid, cv=5)
grid.fit(X_train, y_train)
print("최상의 교차 검증 정확도 : {:.2f}".format(grid.best_score_))
print("테스트 세트 점수 : {:.2f}".format(grid.score(X_test, y_test)))
print("최적의 매개변수 : {}".format(grid.best_params_))

# 6.4 파이프라인 인터페이스
def fit(self, X, y):
    X_transformed = X
    for name, estimator in self.steps[:-1]:
        # 마지막 단계를 빼고 fit과 transform을 반복합니다.
        X_transformed = estimator.fit_transform(X_transformed, y)
    # 마지막 단계 fit을 호출합니다.
    self.steps[-1][1].fit(X_transformed, y)
    return  self

def predict(self, X):
    X_transformed = X
    for step in self.steps[:-1]:
        # 마지막 단계를 빼고 transform을 반복합니다.
        X_transformed = step[1].transform(X_transformed)
    # 마지막 단계에서 predict를 호출합니다.
    return self.steps[-1][1].predict(X_transformed)
